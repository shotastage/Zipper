
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.org.mozilla.rust-android-gradle:plugin:0.8.3'
    }
}


plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'app.magicalsoft.zipper'
    compileSdk 33

    defaultConfig {
        applicationId "app.magicalsoft.zipper"
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // system bars customization
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.28.0"
}

/*
rustAndroidModule {
    module ':app'
    targetDirectory 'path/to/workspace/root/target'  // Path is either absolute, or relative to the gradle project's `projectDir`&#8203;`oaicite:{"index":0,"metadata":{"title":"github.com","url":"https://github.com/mozilla/rust-android-gradle","text":"cargo {\n        // Note: path is either absolute, or relative to the gradle project's `projectDir`.\n        targetDirectory = 'path/to/workspace/root/target","pub_date":null}}`&#8203;.
    targetIncludes = ['libnotlibname.so']  // Replace 'libnotlibname.so' with your library's name.
    apiLevel = 21  // The minimum API level your application supports.
    targets = ["arm", "x86_64"]  // The CPU architectures your application supports&#8203;`oaicite:{"index":1,"metadata":{"title":"github.com","url":"https://github.com/mozilla/rust-android-gradle","text":"cargo {\n        targets = [\"arm\", \"x86_64\"]\n        apiLevels = [\n            \"arm\": 16,\n            \"x86_64\": 21","pub_date":null}}`&#8203;.
    apiLevels = [ "arm": 16, "x86_64": 21 ]  // The minimum API level for each CPU architecture&#8203;`oaicite:{"index":2,"metadata":{"title":"github.com","url":"https://github.com/mozilla/rust-android-gradle","text":"cargo {\n        targets = [\"arm\", \"x86_64\"]\n        apiLevels = [\n            \"arm\": 16,\n            \"x86_64\": 21","pub_date":null}}`&#8203;.
    extraCargoBuildArguments = ['a', 'list', 'of', 'strings']  // Any extra arguments to pass to `cargo build`.
    exec { spec, toolchain ->
        if (toolchain.target != "x86_64-apple-darwin") {
            // Don't statically link on macOS desktop builds, for some hypothetical reason.
            spec.environment("EXAMPLELIB_STATIC", "1")  // Set any necessary environment variables here.
        }
    }
}
*/
